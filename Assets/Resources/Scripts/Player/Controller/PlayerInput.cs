//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Resources/Scripts/Player/Controller/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Underwater"",
            ""id"": ""7f7471a6-a682-443b-9a47-73d034c22533"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""736120f5-1186-49cf-be00-b5837c13363a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""74a6b270-db2e-4093-b78f-375e31153b3d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lunge Forward"",
                    ""type"": ""Button"",
                    ""id"": ""b30f59fe-204f-464b-85b5-5efb76667a13"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Float"",
                    ""type"": ""Button"",
                    ""id"": ""db1ac11d-68dc-4e3d-ba0f-bce922554fab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ab508bf6-18ce-43a9-866d-99709f44c0c9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Vertical"",
                    ""id"": ""3c391ae0-6148-4995-a356-5f538fc810d6"",
                    ""path"": ""1DAxis(whichSideWins=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""01174801-f00d-42cc-88ea-043c22d505aa"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""7cbbf769-9f02-4cb1-a363-2809522bf204"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Horizontal"",
                    ""id"": ""bee0524e-f08d-4d47-874c-278faa7d0fb8"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""8c261b4e-a199-4c5e-a69c-cdb086429280"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""ac3fd6aa-4540-484d-9443-51c008deca9e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Button With One Modifier"",
                    ""id"": ""af3c0ecb-203b-4530-baff-988333f1a7de"",
                    ""path"": ""ButtonWithOneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lunge Forward"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Modifier"",
                    ""id"": ""23a4845a-3af9-4529-8cea-a34a5e353145"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""Lunge Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Button"",
                    ""id"": ""1c96919f-2426-4524-9dd1-261f594a4aa8"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""Lunge Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Elevation"",
                    ""id"": ""330c3def-1fca-4ea6-841f-74fb8558e843"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Float"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""82363e7d-968f-40c6-b3c9-03667abff9cd"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""Float"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b0e250b3-0608-4a61-9752-b86450763cfe"",
                    ""path"": ""<Keyboard>/leftAlt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""Float"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Desktop"",
            ""bindingGroup"": ""Desktop"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Underwater
        m_Underwater = asset.FindActionMap("Underwater", throwIfNotFound: true);
        m_Underwater_Move = m_Underwater.FindAction("Move", throwIfNotFound: true);
        m_Underwater_Jump = m_Underwater.FindAction("Jump", throwIfNotFound: true);
        m_Underwater_LungeForward = m_Underwater.FindAction("Lunge Forward", throwIfNotFound: true);
        m_Underwater_Float = m_Underwater.FindAction("Float", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Underwater
    private readonly InputActionMap m_Underwater;
    private IUnderwaterActions m_UnderwaterActionsCallbackInterface;
    private readonly InputAction m_Underwater_Move;
    private readonly InputAction m_Underwater_Jump;
    private readonly InputAction m_Underwater_LungeForward;
    private readonly InputAction m_Underwater_Float;
    public struct UnderwaterActions
    {
        private @PlayerInput m_Wrapper;
        public UnderwaterActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Underwater_Move;
        public InputAction @Jump => m_Wrapper.m_Underwater_Jump;
        public InputAction @LungeForward => m_Wrapper.m_Underwater_LungeForward;
        public InputAction @Float => m_Wrapper.m_Underwater_Float;
        public InputActionMap Get() { return m_Wrapper.m_Underwater; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UnderwaterActions set) { return set.Get(); }
        public void SetCallbacks(IUnderwaterActions instance)
        {
            if (m_Wrapper.m_UnderwaterActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_UnderwaterActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_UnderwaterActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_UnderwaterActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_UnderwaterActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_UnderwaterActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_UnderwaterActionsCallbackInterface.OnJump;
                @LungeForward.started -= m_Wrapper.m_UnderwaterActionsCallbackInterface.OnLungeForward;
                @LungeForward.performed -= m_Wrapper.m_UnderwaterActionsCallbackInterface.OnLungeForward;
                @LungeForward.canceled -= m_Wrapper.m_UnderwaterActionsCallbackInterface.OnLungeForward;
                @Float.started -= m_Wrapper.m_UnderwaterActionsCallbackInterface.OnFloat;
                @Float.performed -= m_Wrapper.m_UnderwaterActionsCallbackInterface.OnFloat;
                @Float.canceled -= m_Wrapper.m_UnderwaterActionsCallbackInterface.OnFloat;
            }
            m_Wrapper.m_UnderwaterActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @LungeForward.started += instance.OnLungeForward;
                @LungeForward.performed += instance.OnLungeForward;
                @LungeForward.canceled += instance.OnLungeForward;
                @Float.started += instance.OnFloat;
                @Float.performed += instance.OnFloat;
                @Float.canceled += instance.OnFloat;
            }
        }
    }
    public UnderwaterActions @Underwater => new UnderwaterActions(this);
    private int m_DesktopSchemeIndex = -1;
    public InputControlScheme DesktopScheme
    {
        get
        {
            if (m_DesktopSchemeIndex == -1) m_DesktopSchemeIndex = asset.FindControlSchemeIndex("Desktop");
            return asset.controlSchemes[m_DesktopSchemeIndex];
        }
    }
    public interface IUnderwaterActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLungeForward(InputAction.CallbackContext context);
        void OnFloat(InputAction.CallbackContext context);
    }
}
